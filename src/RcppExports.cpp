// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// probcpp
double probcpp(bool cog, int c, int m, double d);
RcppExport SEXP _batson_app_pkg_probcpp(SEXP cogSEXP, SEXP cSEXP, SEXP mSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type cog(cogSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(probcpp(cog, c, m, d));
    return rcpp_result_gen;
END_RCPP
}
// Lk_cpp
double Lk_cpp(double d, NumericMatrix x, bool L);
RcppExport SEXP _batson_app_pkg_Lk_cpp(SEXP dSEXP, SEXP xSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(Lk_cpp(d, x, L));
    return rcpp_result_gen;
END_RCPP
}
// Priorcpp
double Priorcpp(double theta, double mu, double std);
RcppExport SEXP _batson_app_pkg_Priorcpp(SEXP thetaSEXP, SEXP muSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(Priorcpp(theta, mu, std));
    return rcpp_result_gen;
END_RCPP
}
// make_posterior
List make_posterior(NumericMatrix x, int niter, double theta_start_val, double theta_proposal_sd, double prior_mean, double prior_sd);
RcppExport SEXP _batson_app_pkg_make_posterior(SEXP xSEXP, SEXP niterSEXP, SEXP theta_start_valSEXP, SEXP theta_proposal_sdSEXP, SEXP prior_meanSEXP, SEXP prior_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type theta_start_val(theta_start_valSEXP);
    Rcpp::traits::input_parameter< double >::type theta_proposal_sd(theta_proposal_sdSEXP);
    Rcpp::traits::input_parameter< double >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< double >::type prior_sd(prior_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(make_posterior(x, niter, theta_start_val, theta_proposal_sd, prior_mean, prior_sd));
    return rcpp_result_gen;
END_RCPP
}
// Lk_cpp_p
double Lk_cpp_p(double d, NumericMatrix x, bool L);
RcppExport SEXP _batson_app_pkg_Lk_cpp_p(SEXP dSEXP, SEXP xSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(Lk_cpp_p(d, x, L));
    return rcpp_result_gen;
END_RCPP
}
// Priorcpp_p
double Priorcpp_p(double theta, double mu, double std, NumericMatrix x, double a0);
RcppExport SEXP _batson_app_pkg_Priorcpp_p(SEXP thetaSEXP, SEXP muSEXP, SEXP stdSEXP, SEXP xSEXP, SEXP a0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    rcpp_result_gen = Rcpp::wrap(Priorcpp_p(theta, mu, std, x, a0));
    return rcpp_result_gen;
END_RCPP
}
// make_posterior_p
List make_posterior_p(NumericMatrix x, NumericMatrix x_p, double a0, int niter, double theta_start_val, double theta_proposal_sd, double prior_mean, double prior_sd);
RcppExport SEXP _batson_app_pkg_make_posterior_p(SEXP xSEXP, SEXP x_pSEXP, SEXP a0SEXP, SEXP niterSEXP, SEXP theta_start_valSEXP, SEXP theta_proposal_sdSEXP, SEXP prior_meanSEXP, SEXP prior_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type theta_start_val(theta_start_valSEXP);
    Rcpp::traits::input_parameter< double >::type theta_proposal_sd(theta_proposal_sdSEXP);
    Rcpp::traits::input_parameter< double >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< double >::type prior_sd(prior_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(make_posterior_p(x, x_p, a0, niter, theta_start_val, theta_proposal_sd, prior_mean, prior_sd));
    return rcpp_result_gen;
END_RCPP
}
// make_posterior_prior
List make_posterior_prior(NumericMatrix x_p, double a0, int niter, double theta_start_val, double theta_proposal_sd, double prior_mean, double prior_sd);
RcppExport SEXP _batson_app_pkg_make_posterior_prior(SEXP x_pSEXP, SEXP a0SEXP, SEXP niterSEXP, SEXP theta_start_valSEXP, SEXP theta_proposal_sdSEXP, SEXP prior_meanSEXP, SEXP prior_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type theta_start_val(theta_start_valSEXP);
    Rcpp::traits::input_parameter< double >::type theta_proposal_sd(theta_proposal_sdSEXP);
    Rcpp::traits::input_parameter< double >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< double >::type prior_sd(prior_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(make_posterior_prior(x_p, a0, niter, theta_start_val, theta_proposal_sd, prior_mean, prior_sd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_batson_app_pkg_probcpp", (DL_FUNC) &_batson_app_pkg_probcpp, 4},
    {"_batson_app_pkg_Lk_cpp", (DL_FUNC) &_batson_app_pkg_Lk_cpp, 3},
    {"_batson_app_pkg_Priorcpp", (DL_FUNC) &_batson_app_pkg_Priorcpp, 3},
    {"_batson_app_pkg_make_posterior", (DL_FUNC) &_batson_app_pkg_make_posterior, 6},
    {"_batson_app_pkg_Lk_cpp_p", (DL_FUNC) &_batson_app_pkg_Lk_cpp_p, 3},
    {"_batson_app_pkg_Priorcpp_p", (DL_FUNC) &_batson_app_pkg_Priorcpp_p, 5},
    {"_batson_app_pkg_make_posterior_p", (DL_FUNC) &_batson_app_pkg_make_posterior_p, 8},
    {"_batson_app_pkg_make_posterior_prior", (DL_FUNC) &_batson_app_pkg_make_posterior_prior, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_batson_app_pkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
